// Code generated by counterfeiter. DO NOT EDIT.
package raftfakes

import (
	"sync"
	"time"

	etcdraft "github.com/coreos/etcd/raft"
	"github.com/hyperledger/fabric/orderer/consensus/raft"
)

type FakeRaftConfig struct {
	ChainIDStub        func() string
	chainIDMutex       sync.RWMutex
	chainIDArgsForCall []struct{}
	chainIDReturns     struct {
		result1 string
	}
	chainIDReturnsOnCall map[int]struct {
		result1 string
	}
	NodeIDStub        func() uint64
	nodeIDMutex       sync.RWMutex
	nodeIDArgsForCall []struct{}
	nodeIDReturns     struct {
		result1 uint64
	}
	nodeIDReturnsOnCall map[int]struct {
		result1 uint64
	}
	ElectionTickStub        func() int
	electionTickMutex       sync.RWMutex
	electionTickArgsForCall []struct{}
	electionTickReturns     struct {
		result1 int
	}
	electionTickReturnsOnCall map[int]struct {
		result1 int
	}
	HeartbeatTickStub        func() int
	heartbeatTickMutex       sync.RWMutex
	heartbeatTickArgsForCall []struct{}
	heartbeatTickReturns     struct {
		result1 int
	}
	heartbeatTickReturnsOnCall map[int]struct {
		result1 int
	}
	MaxSizePerMsgStub        func() uint64
	maxSizePerMsgMutex       sync.RWMutex
	maxSizePerMsgArgsForCall []struct{}
	maxSizePerMsgReturns     struct {
		result1 uint64
	}
	maxSizePerMsgReturnsOnCall map[int]struct {
		result1 uint64
	}
	MaxInflightMsgsStub        func() int
	maxInflightMsgsMutex       sync.RWMutex
	maxInflightMsgsArgsForCall []struct{}
	maxInflightMsgsReturns     struct {
		result1 int
	}
	maxInflightMsgsReturnsOnCall map[int]struct {
		result1 int
	}
	PeersStub        func() []etcdraft.Peer
	peersMutex       sync.RWMutex
	peersArgsForCall []struct{}
	peersReturns     struct {
		result1 []etcdraft.Peer
	}
	peersReturnsOnCall map[int]struct {
		result1 []etcdraft.Peer
	}
	TickIntervalStub        func() time.Duration
	tickIntervalMutex       sync.RWMutex
	tickIntervalArgsForCall []struct{}
	tickIntervalReturns     struct {
		result1 time.Duration
	}
	tickIntervalReturnsOnCall map[int]struct {
		result1 time.Duration
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRaftConfig) ChainID() string {
	fake.chainIDMutex.Lock()
	ret, specificReturn := fake.chainIDReturnsOnCall[len(fake.chainIDArgsForCall)]
	fake.chainIDArgsForCall = append(fake.chainIDArgsForCall, struct{}{})
	fake.recordInvocation("ChainID", []interface{}{})
	fake.chainIDMutex.Unlock()
	if fake.ChainIDStub != nil {
		return fake.ChainIDStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.chainIDReturns.result1
}

func (fake *FakeRaftConfig) ChainIDCallCount() int {
	fake.chainIDMutex.RLock()
	defer fake.chainIDMutex.RUnlock()
	return len(fake.chainIDArgsForCall)
}

func (fake *FakeRaftConfig) ChainIDReturns(result1 string) {
	fake.ChainIDStub = nil
	fake.chainIDReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeRaftConfig) ChainIDReturnsOnCall(i int, result1 string) {
	fake.ChainIDStub = nil
	if fake.chainIDReturnsOnCall == nil {
		fake.chainIDReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.chainIDReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeRaftConfig) NodeID() uint64 {
	fake.nodeIDMutex.Lock()
	ret, specificReturn := fake.nodeIDReturnsOnCall[len(fake.nodeIDArgsForCall)]
	fake.nodeIDArgsForCall = append(fake.nodeIDArgsForCall, struct{}{})
	fake.recordInvocation("NodeID", []interface{}{})
	fake.nodeIDMutex.Unlock()
	if fake.NodeIDStub != nil {
		return fake.NodeIDStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.nodeIDReturns.result1
}

func (fake *FakeRaftConfig) NodeIDCallCount() int {
	fake.nodeIDMutex.RLock()
	defer fake.nodeIDMutex.RUnlock()
	return len(fake.nodeIDArgsForCall)
}

func (fake *FakeRaftConfig) NodeIDReturns(result1 uint64) {
	fake.NodeIDStub = nil
	fake.nodeIDReturns = struct {
		result1 uint64
	}{result1}
}

func (fake *FakeRaftConfig) NodeIDReturnsOnCall(i int, result1 uint64) {
	fake.NodeIDStub = nil
	if fake.nodeIDReturnsOnCall == nil {
		fake.nodeIDReturnsOnCall = make(map[int]struct {
			result1 uint64
		})
	}
	fake.nodeIDReturnsOnCall[i] = struct {
		result1 uint64
	}{result1}
}

func (fake *FakeRaftConfig) ElectionTick() int {
	fake.electionTickMutex.Lock()
	ret, specificReturn := fake.electionTickReturnsOnCall[len(fake.electionTickArgsForCall)]
	fake.electionTickArgsForCall = append(fake.electionTickArgsForCall, struct{}{})
	fake.recordInvocation("ElectionTick", []interface{}{})
	fake.electionTickMutex.Unlock()
	if fake.ElectionTickStub != nil {
		return fake.ElectionTickStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.electionTickReturns.result1
}

func (fake *FakeRaftConfig) ElectionTickCallCount() int {
	fake.electionTickMutex.RLock()
	defer fake.electionTickMutex.RUnlock()
	return len(fake.electionTickArgsForCall)
}

func (fake *FakeRaftConfig) ElectionTickReturns(result1 int) {
	fake.ElectionTickStub = nil
	fake.electionTickReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeRaftConfig) ElectionTickReturnsOnCall(i int, result1 int) {
	fake.ElectionTickStub = nil
	if fake.electionTickReturnsOnCall == nil {
		fake.electionTickReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.electionTickReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeRaftConfig) HeartbeatTick() int {
	fake.heartbeatTickMutex.Lock()
	ret, specificReturn := fake.heartbeatTickReturnsOnCall[len(fake.heartbeatTickArgsForCall)]
	fake.heartbeatTickArgsForCall = append(fake.heartbeatTickArgsForCall, struct{}{})
	fake.recordInvocation("HeartbeatTick", []interface{}{})
	fake.heartbeatTickMutex.Unlock()
	if fake.HeartbeatTickStub != nil {
		return fake.HeartbeatTickStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.heartbeatTickReturns.result1
}

func (fake *FakeRaftConfig) HeartbeatTickCallCount() int {
	fake.heartbeatTickMutex.RLock()
	defer fake.heartbeatTickMutex.RUnlock()
	return len(fake.heartbeatTickArgsForCall)
}

func (fake *FakeRaftConfig) HeartbeatTickReturns(result1 int) {
	fake.HeartbeatTickStub = nil
	fake.heartbeatTickReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeRaftConfig) HeartbeatTickReturnsOnCall(i int, result1 int) {
	fake.HeartbeatTickStub = nil
	if fake.heartbeatTickReturnsOnCall == nil {
		fake.heartbeatTickReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.heartbeatTickReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeRaftConfig) MaxSizePerMsg() uint64 {
	fake.maxSizePerMsgMutex.Lock()
	ret, specificReturn := fake.maxSizePerMsgReturnsOnCall[len(fake.maxSizePerMsgArgsForCall)]
	fake.maxSizePerMsgArgsForCall = append(fake.maxSizePerMsgArgsForCall, struct{}{})
	fake.recordInvocation("MaxSizePerMsg", []interface{}{})
	fake.maxSizePerMsgMutex.Unlock()
	if fake.MaxSizePerMsgStub != nil {
		return fake.MaxSizePerMsgStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.maxSizePerMsgReturns.result1
}

func (fake *FakeRaftConfig) MaxSizePerMsgCallCount() int {
	fake.maxSizePerMsgMutex.RLock()
	defer fake.maxSizePerMsgMutex.RUnlock()
	return len(fake.maxSizePerMsgArgsForCall)
}

func (fake *FakeRaftConfig) MaxSizePerMsgReturns(result1 uint64) {
	fake.MaxSizePerMsgStub = nil
	fake.maxSizePerMsgReturns = struct {
		result1 uint64
	}{result1}
}

func (fake *FakeRaftConfig) MaxSizePerMsgReturnsOnCall(i int, result1 uint64) {
	fake.MaxSizePerMsgStub = nil
	if fake.maxSizePerMsgReturnsOnCall == nil {
		fake.maxSizePerMsgReturnsOnCall = make(map[int]struct {
			result1 uint64
		})
	}
	fake.maxSizePerMsgReturnsOnCall[i] = struct {
		result1 uint64
	}{result1}
}

func (fake *FakeRaftConfig) MaxInflightMsgs() int {
	fake.maxInflightMsgsMutex.Lock()
	ret, specificReturn := fake.maxInflightMsgsReturnsOnCall[len(fake.maxInflightMsgsArgsForCall)]
	fake.maxInflightMsgsArgsForCall = append(fake.maxInflightMsgsArgsForCall, struct{}{})
	fake.recordInvocation("MaxInflightMsgs", []interface{}{})
	fake.maxInflightMsgsMutex.Unlock()
	if fake.MaxInflightMsgsStub != nil {
		return fake.MaxInflightMsgsStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.maxInflightMsgsReturns.result1
}

func (fake *FakeRaftConfig) MaxInflightMsgsCallCount() int {
	fake.maxInflightMsgsMutex.RLock()
	defer fake.maxInflightMsgsMutex.RUnlock()
	return len(fake.maxInflightMsgsArgsForCall)
}

func (fake *FakeRaftConfig) MaxInflightMsgsReturns(result1 int) {
	fake.MaxInflightMsgsStub = nil
	fake.maxInflightMsgsReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeRaftConfig) MaxInflightMsgsReturnsOnCall(i int, result1 int) {
	fake.MaxInflightMsgsStub = nil
	if fake.maxInflightMsgsReturnsOnCall == nil {
		fake.maxInflightMsgsReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.maxInflightMsgsReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeRaftConfig) Peers() []etcdraft.Peer {
	fake.peersMutex.Lock()
	ret, specificReturn := fake.peersReturnsOnCall[len(fake.peersArgsForCall)]
	fake.peersArgsForCall = append(fake.peersArgsForCall, struct{}{})
	fake.recordInvocation("Peers", []interface{}{})
	fake.peersMutex.Unlock()
	if fake.PeersStub != nil {
		return fake.PeersStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.peersReturns.result1
}

func (fake *FakeRaftConfig) PeersCallCount() int {
	fake.peersMutex.RLock()
	defer fake.peersMutex.RUnlock()
	return len(fake.peersArgsForCall)
}

func (fake *FakeRaftConfig) PeersReturns(result1 []etcdraft.Peer) {
	fake.PeersStub = nil
	fake.peersReturns = struct {
		result1 []etcdraft.Peer
	}{result1}
}

func (fake *FakeRaftConfig) PeersReturnsOnCall(i int, result1 []etcdraft.Peer) {
	fake.PeersStub = nil
	if fake.peersReturnsOnCall == nil {
		fake.peersReturnsOnCall = make(map[int]struct {
			result1 []etcdraft.Peer
		})
	}
	fake.peersReturnsOnCall[i] = struct {
		result1 []etcdraft.Peer
	}{result1}
}

func (fake *FakeRaftConfig) TickInterval() time.Duration {
	fake.tickIntervalMutex.Lock()
	ret, specificReturn := fake.tickIntervalReturnsOnCall[len(fake.tickIntervalArgsForCall)]
	fake.tickIntervalArgsForCall = append(fake.tickIntervalArgsForCall, struct{}{})
	fake.recordInvocation("TickInterval", []interface{}{})
	fake.tickIntervalMutex.Unlock()
	if fake.TickIntervalStub != nil {
		return fake.TickIntervalStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.tickIntervalReturns.result1
}

func (fake *FakeRaftConfig) TickIntervalCallCount() int {
	fake.tickIntervalMutex.RLock()
	defer fake.tickIntervalMutex.RUnlock()
	return len(fake.tickIntervalArgsForCall)
}

func (fake *FakeRaftConfig) TickIntervalReturns(result1 time.Duration) {
	fake.TickIntervalStub = nil
	fake.tickIntervalReturns = struct {
		result1 time.Duration
	}{result1}
}

func (fake *FakeRaftConfig) TickIntervalReturnsOnCall(i int, result1 time.Duration) {
	fake.TickIntervalStub = nil
	if fake.tickIntervalReturnsOnCall == nil {
		fake.tickIntervalReturnsOnCall = make(map[int]struct {
			result1 time.Duration
		})
	}
	fake.tickIntervalReturnsOnCall[i] = struct {
		result1 time.Duration
	}{result1}
}

func (fake *FakeRaftConfig) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.chainIDMutex.RLock()
	defer fake.chainIDMutex.RUnlock()
	fake.nodeIDMutex.RLock()
	defer fake.nodeIDMutex.RUnlock()
	fake.electionTickMutex.RLock()
	defer fake.electionTickMutex.RUnlock()
	fake.heartbeatTickMutex.RLock()
	defer fake.heartbeatTickMutex.RUnlock()
	fake.maxSizePerMsgMutex.RLock()
	defer fake.maxSizePerMsgMutex.RUnlock()
	fake.maxInflightMsgsMutex.RLock()
	defer fake.maxInflightMsgsMutex.RUnlock()
	fake.peersMutex.RLock()
	defer fake.peersMutex.RUnlock()
	fake.tickIntervalMutex.RLock()
	defer fake.tickIntervalMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRaftConfig) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ raft.RaftConfig = new(FakeRaftConfig)
