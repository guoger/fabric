// Code generated by counterfeiter. DO NOT EDIT.
package raftfakes

import (
	"sync"

	"github.com/hyperledger/fabric/orderer/consensus/raft"
	"github.com/hyperledger/fabric/protos/orderer"
)

type FakeTransport struct {
	StepStub        func(destination uint64, msg *orderer.StepRequest) (*orderer.StepResponse, error)
	stepMutex       sync.RWMutex
	stepArgsForCall []struct {
		destination uint64
		msg         *orderer.StepRequest
	}
	stepReturns struct {
		result1 *orderer.StepResponse
		result2 error
	}
	stepReturnsOnCall map[int]struct {
		result1 *orderer.StepResponse
		result2 error
	}
	SendSubmitRequestStub        func(destination uint64, request *orderer.SubmitRequest) error
	sendSubmitRequestMutex       sync.RWMutex
	sendSubmitRequestArgsForCall []struct {
		destination uint64
		request     *orderer.SubmitRequest
	}
	sendSubmitRequestReturns struct {
		result1 error
	}
	sendSubmitRequestReturnsOnCall map[int]struct {
		result1 error
	}
	ReceiveSubmitResponseStub        func(destination uint64) (*orderer.SubmitResponse, error)
	receiveSubmitResponseMutex       sync.RWMutex
	receiveSubmitResponseArgsForCall []struct {
		destination uint64
	}
	receiveSubmitResponseReturns struct {
		result1 *orderer.SubmitResponse
		result2 error
	}
	receiveSubmitResponseReturnsOnCall map[int]struct {
		result1 *orderer.SubmitResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTransport) Step(destination uint64, msg *orderer.StepRequest) (*orderer.StepResponse, error) {
	fake.stepMutex.Lock()
	ret, specificReturn := fake.stepReturnsOnCall[len(fake.stepArgsForCall)]
	fake.stepArgsForCall = append(fake.stepArgsForCall, struct {
		destination uint64
		msg         *orderer.StepRequest
	}{destination, msg})
	fake.recordInvocation("Step", []interface{}{destination, msg})
	fake.stepMutex.Unlock()
	if fake.StepStub != nil {
		return fake.StepStub(destination, msg)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.stepReturns.result1, fake.stepReturns.result2
}

func (fake *FakeTransport) StepCallCount() int {
	fake.stepMutex.RLock()
	defer fake.stepMutex.RUnlock()
	return len(fake.stepArgsForCall)
}

func (fake *FakeTransport) StepArgsForCall(i int) (uint64, *orderer.StepRequest) {
	fake.stepMutex.RLock()
	defer fake.stepMutex.RUnlock()
	return fake.stepArgsForCall[i].destination, fake.stepArgsForCall[i].msg
}

func (fake *FakeTransport) StepReturns(result1 *orderer.StepResponse, result2 error) {
	fake.StepStub = nil
	fake.stepReturns = struct {
		result1 *orderer.StepResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeTransport) StepReturnsOnCall(i int, result1 *orderer.StepResponse, result2 error) {
	fake.StepStub = nil
	if fake.stepReturnsOnCall == nil {
		fake.stepReturnsOnCall = make(map[int]struct {
			result1 *orderer.StepResponse
			result2 error
		})
	}
	fake.stepReturnsOnCall[i] = struct {
		result1 *orderer.StepResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeTransport) SendSubmitRequest(destination uint64, request *orderer.SubmitRequest) error {
	fake.sendSubmitRequestMutex.Lock()
	ret, specificReturn := fake.sendSubmitRequestReturnsOnCall[len(fake.sendSubmitRequestArgsForCall)]
	fake.sendSubmitRequestArgsForCall = append(fake.sendSubmitRequestArgsForCall, struct {
		destination uint64
		request     *orderer.SubmitRequest
	}{destination, request})
	fake.recordInvocation("SendSubmitRequest", []interface{}{destination, request})
	fake.sendSubmitRequestMutex.Unlock()
	if fake.SendSubmitRequestStub != nil {
		return fake.SendSubmitRequestStub(destination, request)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.sendSubmitRequestReturns.result1
}

func (fake *FakeTransport) SendSubmitRequestCallCount() int {
	fake.sendSubmitRequestMutex.RLock()
	defer fake.sendSubmitRequestMutex.RUnlock()
	return len(fake.sendSubmitRequestArgsForCall)
}

func (fake *FakeTransport) SendSubmitRequestArgsForCall(i int) (uint64, *orderer.SubmitRequest) {
	fake.sendSubmitRequestMutex.RLock()
	defer fake.sendSubmitRequestMutex.RUnlock()
	return fake.sendSubmitRequestArgsForCall[i].destination, fake.sendSubmitRequestArgsForCall[i].request
}

func (fake *FakeTransport) SendSubmitRequestReturns(result1 error) {
	fake.SendSubmitRequestStub = nil
	fake.sendSubmitRequestReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTransport) SendSubmitRequestReturnsOnCall(i int, result1 error) {
	fake.SendSubmitRequestStub = nil
	if fake.sendSubmitRequestReturnsOnCall == nil {
		fake.sendSubmitRequestReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.sendSubmitRequestReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTransport) ReceiveSubmitResponse(destination uint64) (*orderer.SubmitResponse, error) {
	fake.receiveSubmitResponseMutex.Lock()
	ret, specificReturn := fake.receiveSubmitResponseReturnsOnCall[len(fake.receiveSubmitResponseArgsForCall)]
	fake.receiveSubmitResponseArgsForCall = append(fake.receiveSubmitResponseArgsForCall, struct {
		destination uint64
	}{destination})
	fake.recordInvocation("ReceiveSubmitResponse", []interface{}{destination})
	fake.receiveSubmitResponseMutex.Unlock()
	if fake.ReceiveSubmitResponseStub != nil {
		return fake.ReceiveSubmitResponseStub(destination)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.receiveSubmitResponseReturns.result1, fake.receiveSubmitResponseReturns.result2
}

func (fake *FakeTransport) ReceiveSubmitResponseCallCount() int {
	fake.receiveSubmitResponseMutex.RLock()
	defer fake.receiveSubmitResponseMutex.RUnlock()
	return len(fake.receiveSubmitResponseArgsForCall)
}

func (fake *FakeTransport) ReceiveSubmitResponseArgsForCall(i int) uint64 {
	fake.receiveSubmitResponseMutex.RLock()
	defer fake.receiveSubmitResponseMutex.RUnlock()
	return fake.receiveSubmitResponseArgsForCall[i].destination
}

func (fake *FakeTransport) ReceiveSubmitResponseReturns(result1 *orderer.SubmitResponse, result2 error) {
	fake.ReceiveSubmitResponseStub = nil
	fake.receiveSubmitResponseReturns = struct {
		result1 *orderer.SubmitResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeTransport) ReceiveSubmitResponseReturnsOnCall(i int, result1 *orderer.SubmitResponse, result2 error) {
	fake.ReceiveSubmitResponseStub = nil
	if fake.receiveSubmitResponseReturnsOnCall == nil {
		fake.receiveSubmitResponseReturnsOnCall = make(map[int]struct {
			result1 *orderer.SubmitResponse
			result2 error
		})
	}
	fake.receiveSubmitResponseReturnsOnCall[i] = struct {
		result1 *orderer.SubmitResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeTransport) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.stepMutex.RLock()
	defer fake.stepMutex.RUnlock()
	fake.sendSubmitRequestMutex.RLock()
	defer fake.sendSubmitRequestMutex.RUnlock()
	fake.receiveSubmitResponseMutex.RLock()
	defer fake.receiveSubmitResponseMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTransport) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ raft.Transport = new(FakeTransport)
