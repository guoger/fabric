// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"sync"

	"github.com/hyperledger/fabric/core/chaincode/extcc"
	"github.com/hyperledger/fabric/core/chaincode/lifecycle"
)

type ChaincodeLauncher struct {
	LaunchStub        func(string, extcc.StreamHandler) error
	launchMutex       sync.RWMutex
	launchArgsForCall []struct {
		arg1 string
		arg2 extcc.StreamHandler
	}
	launchReturns struct {
		result1 error
	}
	launchReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ChaincodeLauncher) Launch(arg1 string, arg2 extcc.StreamHandler) error {
	fake.launchMutex.Lock()
	ret, specificReturn := fake.launchReturnsOnCall[len(fake.launchArgsForCall)]
	fake.launchArgsForCall = append(fake.launchArgsForCall, struct {
		arg1 string
		arg2 extcc.StreamHandler
	}{arg1, arg2})
	fake.recordInvocation("Launch", []interface{}{arg1, arg2})
	fake.launchMutex.Unlock()
	if fake.LaunchStub != nil {
		return fake.LaunchStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.launchReturns
	return fakeReturns.result1
}

func (fake *ChaincodeLauncher) LaunchCallCount() int {
	fake.launchMutex.RLock()
	defer fake.launchMutex.RUnlock()
	return len(fake.launchArgsForCall)
}

func (fake *ChaincodeLauncher) LaunchCalls(stub func(string, extcc.StreamHandler) error) {
	fake.launchMutex.Lock()
	defer fake.launchMutex.Unlock()
	fake.LaunchStub = stub
}

func (fake *ChaincodeLauncher) LaunchArgsForCall(i int) (string, extcc.StreamHandler) {
	fake.launchMutex.RLock()
	defer fake.launchMutex.RUnlock()
	argsForCall := fake.launchArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ChaincodeLauncher) LaunchReturns(result1 error) {
	fake.launchMutex.Lock()
	defer fake.launchMutex.Unlock()
	fake.LaunchStub = nil
	fake.launchReturns = struct {
		result1 error
	}{result1}
}

func (fake *ChaincodeLauncher) LaunchReturnsOnCall(i int, result1 error) {
	fake.launchMutex.Lock()
	defer fake.launchMutex.Unlock()
	fake.LaunchStub = nil
	if fake.launchReturnsOnCall == nil {
		fake.launchReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.launchReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ChaincodeLauncher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.launchMutex.RLock()
	defer fake.launchMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ChaincodeLauncher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ lifecycle.ChaincodeLauncher = new(ChaincodeLauncher)
